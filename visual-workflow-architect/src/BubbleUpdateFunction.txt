function(instance, properties, context) {
    // Find the container by looking for our plugin container
    var containerElement = instance.canvas.find('.workflow-architect-container[data-plugin-id]');
    
    if (containerElement.length === 0) {
        instance.canvas.html('<div style="padding:20px; color: red;">Plugin container not found. Initialize function may have failed.</div>');
        return;
    }
    
    // Get data from DOM attributes
    var pluginId = containerElement.attr('data-plugin-id');
    var isInitialized = containerElement.attr('data-initialized') === 'true';
    
    if (!isInitialized) {
        containerElement.html('<div style="padding:20px; color: red;">Container not properly initialized</div>');
        return;
    }
    
    // Check if required scripts are loaded
    if (typeof window.WorkflowArchitectDataStore === 'undefined') {
        containerElement.html('<div style="padding:20px; border: 2px solid #ff4444; border-radius: 8px; background: #fff5f5; color: #cc0000;">Data Store script not loaded<br>Check plugin headers for data-store.js</div>');
        return;
    }
    
    // Initialize Event Bridges
    if (window.WorkflowArchitectEventBridge) {
        window.WorkflowArchitectEventBridge.init(instance, containerElement);
    }
    if (window.SequenceDiagramEventBridge) {
        window.SequenceDiagramEventBridge.init(instance);
    }
    
    // Show success if all scripts loaded but no feature selected
    if (!properties.feature) {
        containerElement.html('<div style="padding:20px; background: #e8f5e8; border: 2px solid #4caf50; border-radius: 8px; color: #2e7d32;"><h3>Visual Workflow Architect Ready</h3><p>All scripts loaded successfully!</p><p><strong>Next step:</strong> Select a feature in the element properties</p><p>Plugin ID: ' + pluginId + '</p></div>');
        return;
    }
    
    try {
        // Extract feature data
        var featureId = properties.feature.get('_id');
        var featureName = properties.feature.get('name_text') || properties.feature.get('name') || 'Untitled Feature';
        var containerCount = properties.containers ? properties.containers.length() : 0;
        var sequenceCount = properties.sequences ? properties.sequences.length() : 0;
        var workflowCount = properties.workflows ? properties.workflows.length() : 0;
        var subgroupCount = properties.subgroups ? properties.subgroups.length() : 0;

        var allContainers = containerCount > 0 ? properties.containers.get(0, containerCount) : [];
        var allSequences = sequenceCount > 0 ? properties.sequences.get(0, sequenceCount) : [];
        var allWorkflows = workflowCount > 0 ? properties.workflows.get(0, workflowCount) : [];
        var allSubgroups = subgroupCount > 0 ? properties.subgroups.get(0, subgroupCount) : [];
        allWorkflows.forEach(function(workflow, index) {
            workflow.get('_id');
            workflow.get('label_text');
            workflow.get('feature_custom_feature3');
        });

        allSubgroups.forEach(function(subgroup, index) {
            subgroup.get('_id');
            subgroup.get('label_text');
            subgroup.get('workflow_custom_workflow');
            subgroup.listProperties();
        });
        
        allContainers.forEach(c => {
            c.get('label_text');
            c.get('_id');
            console.log(c.listProperties());
            c.get('order_index_number');
            c.get('type_option_storytype');
            c.get('feature_custom_feature3');
            c.get('Persona');
        });

        allContainers.forEach(function(container, index) {
            container.get('name_text');
            container.get('_id');
			container.get("order_index_number");
			
            var persona = container.get('Persona');
            if (persona && persona.get) {
                persona.get('name');
                persona.get('_id');
            }
            var type = container.get('type');
            if (type && type.get) {
                type.get('name');
                type.get('_id');
            }
            var feature = container.get('feature');
            if (feature && feature.get) {
                feature.get('_id');
            }
            container.get('url');
            container.get('externalcomponentid');
            container.get('x_position');
            container.get('color_hex');
        });
        
        allSequences.forEach(function(sequence, index) {
            sequence.get('_id');
            sequence.get('label_text');
            sequence.get('description_text');
            sequence.get('fromcontainer_custom_component');
            sequence.get('tocontainer_custom_component');
            sequence.get('feature_custom_feature3');
            sequence.get('sequencetype_option_sequencetype');
            sequence.get('order_index_number');
            sequence.get('is_dashed_boolean');
            sequence.get('color_hex_text');
        });
        
        var bubbleData = {
            feature: properties.feature,
            containers: allContainers,
            sequences: allSequences,
            workflows: allWorkflows,
            subgroups: allSubgroups
        };
        
        window.WorkflowArchitectDataStore.init(bubbleData);
        
        if (window.SequenceDiagramDataStore) {
            if (!window.SequenceDiagramDataStore.isInitialized) {
                window.SequenceDiagramDataStore.init(bubbleData.feature, allContainers, allSequences);
            } else {
                window.SequenceDiagramDataStore.loadData(bubbleData.feature, allContainers, allSequences);
            }
        }
        
        containerElement.attr('data-feature-id', featureId);
        
        var contentHash = '';
        try {
            var containerNames = allContainers.map(c => c.get('name_text') || '').join('|');
            var sequenceLabels = allSequences.map(s => s.get('label_text') || '').join('|');
            
            // Enhanced sequence order detection - include all order-related fields
            var sequenceOrder = allSequences.map(s => {
                var id = s.get('_id');
                var orderIndex = s.get('order_index_number') || 0;
                var orderNumber = s.get('order_number') || 0;
                return `${id}:${orderIndex}:${orderNumber}`;
            }).sort().join(','); // Sort to ensure consistent ordering
            
            var workflowNames = allWorkflows.map(w => w.get('label_text') || '').join('|');
            var subgroupNames = allSubgroups.map(sg => sg.get('label_text') || '').join('|');
            
            // Add timestamp component to force rerender on drag-drop events
            var timestamp = Date.now();
            var timeDiff = timestamp - (window.lastUpdateTime || 0);
            window.lastUpdateTime = timestamp;
            
            // If less than 2 seconds since last update, likely a drag-drop reorder
            var isRecentUpdate = timeDiff < 2000;
            var updateMarker = isRecentUpdate ? ':RECENT:' + timestamp : '';
            
            contentHash = containerNames + '::' + sequenceLabels + '::' + sequenceOrder + updateMarker + '::' + workflowNames + '::' + subgroupNames;
        } catch (e) {
            contentHash = Date.now().toString();
        }
        
        var currentDataHash = JSON.stringify({
            containers: containerCount,
            sequences: sequenceCount,
            workflows: workflowCount,
            subgroups: subgroupCount,
            featureId: featureId,
            contentHash: contentHash
        });
        
        var lastDataHash = containerElement.attr('data-last-hash');
        if (currentDataHash === lastDataHash) {
            return;
        }
        
        containerElement.attr('data-last-hash', currentDataHash);
        
        if (window.WorkflowArchitectViewManager) {
            var fullContainerId = 'workflow-architect-' + pluginId;
            window.WorkflowArchitectViewManager.init(fullContainerId, bubbleData);
        }
        
     if (window.WorkflowArchitectRenderer) {
            var domElement = containerElement[0] || containerElement.get(0);
            var uniqueId = pluginId; // Get the uniqueId from the already-defined variable

            // Create and store the React root in our global manager ONLY if it doesn't already exist for this instance.
            if (!window.WorkflowArchitectRoots[uniqueId]) {
                console.log('UPDATE: Creating React root for instance:', uniqueId);
                window.WorkflowArchitectRoots[uniqueId] = window.ReactDOM.createRoot(domElement);
            }
            
            // Pass the data and the persistent React root for this specific instance to the renderer.
            window.WorkflowArchitectRenderer.render(bubbleData, window.WorkflowArchitectRoots[uniqueId]);
        } else {
            containerElement.html('<div style="padding:20px; background: #fff3cd; border: 2px solid #ffc107; border-radius: 8px;"><h3>Feature: ' + featureName + '</h3><p>Containers: ' + allContainers.length + '</p><p>Sequences: ' + allSequences.length + '</p><p>Renderer not available - check headers.txt</p></div>');
        }

    } catch (err) {
        if (err.message === 'not ready') {
            containerElement.html('<div style="padding:20px; text-align:center; color: #666;">Loading Visual Workflow Architect...</div>');
            throw err;
        }
        
        containerElement.html('<div style="padding:20px; border: 2px solid #ff4444; border-radius: 8px; background: #fff5f5; color: #cc0000;">ERROR<br>' + err.message + '<br><small>Check console for details</small></div>');
    }
}